// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Diffuculty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                  String    @id @default(uuid())
  name                String?
  email               String    @unique
  imageUrl            String?
  imageId             String?
  role                UserRole  @default(USER)
  OTP                 Int?
  password            String
  refreshToken        String    @default("")
  resetPasswordToken  String?
  resetPasswordExpiry DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
  playlists     Playlist[]
  discussions   Discussion[]
  replies       Reply[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Diffuculty
  tags        String[] // ["tag1", "tag2", "tag3"]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json // [{input: String, output: String}]
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions       Submission[]
  solvedBy          ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted, wrong answer
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String
  isPublished Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // unique playlist names per user
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId])
}

model Discussion {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  views     Int
  upvotes   Int
  downvotes Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies Reply[]
}

model Reply {
  id           String @id @default(uuid())
  discussionId String
  userId       String
  content      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
